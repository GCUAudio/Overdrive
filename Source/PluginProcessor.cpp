/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
OverdriveAudioProcessor::OverdriveAudioProcessor()
{
    _inputGain = 1.0f;
}

OverdriveAudioProcessor::~OverdriveAudioProcessor()
{
}

//==============================================================================
const String OverdriveAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int OverdriveAudioProcessor::getNumParameters()
{
    return kNumParameters;
}

float OverdriveAudioProcessor::getParameter (int index)
{
    // This method will be called by the host, probably on the audio thread, so
    // it's absolutely time-critical. Don't use critical sections or anything
    // UI-related, or anything at all that may block in any way!
    switch (index)
    {
        case kInputGain:        return _inputGain;
        default:                     return 0.0f;
    }
}

void OverdriveAudioProcessor::setParameter (int index, float newValue)
{
    // This method will be called by the host, probably on the audio thread, so
    // it's absolutely time-critical. Don't use critical sections or anything
    // UI-related, or anything at all that may block in any way!
    switch (index)
    {
        case kInputGain:
            _inputGain = newValue;
            break;
        default:
            break;
    }
}

const String OverdriveAudioProcessor::getParameterName (int index)
{
    switch (index)
    {
        case kInputGain:   return "inputGain";
        default:                break;
    }
    
    return String::empty;
}

const String OverdriveAudioProcessor::getParameterText (int index)
{
    return String (getParameter (index), 2);
}

bool OverdriveAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool OverdriveAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool OverdriveAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double OverdriveAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int OverdriveAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int OverdriveAudioProcessor::getCurrentProgram()
{
    return 0;
}

void OverdriveAudioProcessor::setCurrentProgram (int index)
{
}

const String OverdriveAudioProcessor::getProgramName (int index)
{
    return String();
}

void OverdriveAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void OverdriveAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void OverdriveAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void OverdriveAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    // Number of samples
    const int numSamples = buffer.getNumSamples();

    // To store the output sample at each loop cycle
    float out = 0.0f;

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
		// Apply gain change to all samples in the buffer
		buffer.applyGain(channel, 0, buffer.getNumSamples(), _inputGain);

        float* channelData = buffer.getWritePointer (channel);

        for (int i = 0; i < numSamples; ++i)
        {
            // Store input sample then get the absolute value
            const float in = channelData[i];
            const float absIn = fabs(in);
            
            // Get sign of input sample
            const int sign = signum(in);
            
            // Thresholds
            float threshold1 = 1.0f / 3.0f; // 0.33333
            float threshold2 = 2.0f / 3.0f; // 0.66666
            
            if (absIn > threshold2) {
                out = 0.99f * sign;
            }
            else if (absIn > threshold1){
                out = ((3.0f - (2.0f - 3.0f * absIn) * (2.0f - 3.0f * absIn)) / 3.0f) * sign;
            }
            else{
                out = 2.0f * in;
            }
            
            // Write the result to the ouptut buffer
            channelData[i] = out / 2.0f; // divide all by 2 to compensate for extra 6 dB gain boost
        }
    }
}

// extracts the sign of a float number
int OverdriveAudioProcessor::signum(float x)
{
    
    /*if (x > 0)
        return 1;
    else if (x < 0)
        return -1;
    else
        return 0;*/
    
    // Same as the above but with the ternary operator
    return (x > 0) ? 1 : ((x < 0) ? -1 : 0);
}

//==============================================================================
bool OverdriveAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* OverdriveAudioProcessor::createEditor()
{
    return new OverdriveAudioProcessorEditor (*this);
}

//==============================================================================
void OverdriveAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void OverdriveAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new OverdriveAudioProcessor();
}
